

// const minimum = (a, x) => Math.min(x - a % x, a % x);
// console.log(minimum(28, 16));

     

//----------------------- 1 --------------------//Name That Integer
// Напишите метод detect_int, который возвращает первое положительное целое число,
//     для которого произвольное число лямбда - выражений возвращает значение true.
//     Если аргументы не переданы, то detect_intдолжен вернуть 1.
// function detectInt(lam) {
//     return lam 
// }
// console.log(detectInt((x) => x > 9));




// //----------------------- 2 --------------------//zipWith
// // zipWithберет функцию и два массива и объединяет массивы вместе, применяя функцию к каждой паре значений.
// // Значением функции является один новый массив.Если массивы имеют неравную длину, вывод будет такой же
// // длины, как и более короткий.
// function zipWith(fn, a0, a1) {
  
//     return a0.map((el, i) => fn(el, a1[i])).filter(el => !isNaN(el));
// }
// console.log(zipWith(Math.max(), [1, 4, 7, 1, 4, 7], [4, 7, 1, 4, 7, 1]));


//----------------------- 3 --------------------//Functional Addition
//Создайте функцию add(n)/ Add(n), которая возвращает функцию, которая всегда добавляет n к любому числу.
function add(n) {
  
}

//----------------------- 4 --------------------// Chain me
//Напишите универсальную цепочку функций, которая принимает начальное значение и массив функций для его выполнения
function chain(input, fs) {

}